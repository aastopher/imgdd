{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#imgdd-image-deduplication","title":"imgdd: Image DeDuplication","text":"<p><code>imgdd</code> is a performance-first perceptual hashing library that combines Rust's speed with Python's accessibility, making it perfect for handling large datasets. Designed to quickly process nested folder structures, commonly found in image datasets.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple Hashing Algorithms: Supports <code>aHash</code>, <code>dHash</code>, <code>mHash</code>, <code>pHash</code>, <code>wHash</code>.</li> <li>Multiple Filter Types: Supports <code>Nearest</code>, <code>Triangle</code>, <code>CatmullRom</code>, <code>Gaussian</code>, <code>Lanczos3</code>.</li> <li>Identify Duplicates: Quickly identify duplicate hash pairs.</li> <li>Simplicity: Simple interface, robust performance.</li> </ul>"},{"location":"#why-imgdd","title":"Why imgdd?","text":"<p><code>imgdd</code> has been inspired by imagehash and aims to be a lightning-fast replacement with additional features. To ensure enhanced performance, <code>imgdd</code> has been benchmarked against <code>imagehash</code>. In Python, imgdd consistently outperforms imagehash by ~60%\u201395%, demonstrating a significant reduction in hashing time per image.</p>"},{"location":"benches/","title":"Benchmarks","text":"<p>This section highlights the performance benchmarks for the hashing algorithms provided by imgdd compared to the imagehash library. The following benchmarks demonstrate significant speed improvements across supported algorithms.</p>"},{"location":"benches/#cpu-details","title":"CPU Details","text":"<ul> <li>Architecture: x86_64</li> <li>CPU: Intel(R) Core(TM) i5-8365U CPU @ 1.60GHz<ul> <li>Cores: 4 (8 Threads)</li> <li>Max Frequency: 4.1 GHz</li> <li>Base Frequency: 1.6 GHz</li> </ul> </li> </ul>"},{"location":"benches/#rust-benchmarks","title":"Rust Benchmarks","text":"<p>Below is a snapshot of local bare metal benchmarks taken on using Criterion directly on the imgddcore Rust crate, based on the hardware details above.</p> Algorithm Time (ms) Measurements aHash 0.815 100 mHash 1.369 100 dHash 0.541 100 pHash 23.709 100 wHash 3.345 100"},{"location":"benches/#python-integration-benchmarks","title":"Python Integration Benchmarks","text":"<p>The table below compares the local performance of imgdd with the imagehash library, based on the hardware details above.</p>"},{"location":"benches/#dhash","title":"dHash","text":"Metric imgdd (ms) imagehash (ms) Improvement (%) Min Time 1.788 5.098 64.92 Max Time 2.792 7.684 63.67 Avg Time 1.942 5.645 65.59 Median Time 1.888 5.554 66.02"},{"location":"benches/#ahash","title":"aHash","text":"Metric imgdd (ms) imagehash (ms) Improvement (%) Min Time 1.683 5.666 70.29 Max Time 3.207 15.403 79.18 Avg Time 2.055 8.346 75.38 Median Time 2.043 7.683 73.41"},{"location":"benches/#phash","title":"pHash","text":"Metric imgdd (ms) imagehash (ms) Improvement (%) Min Time 1.798 5.726 68.60 Max Time 4.063 20.099 79.78 Avg Time 2.361 7.896 70.10 Median Time 2.138 7.196 70.29"},{"location":"benches/#whash","title":"wHash","text":"Metric imgdd (ms) imagehash (ms) Improvement (%) Min Time 1.750 42.418 95.87 Max Time 4.422 97.446 95.46 Avg Time 2.192 62.656 96.50 Median Time 1.978 60.397 96.72"},{"location":"benches/#summary","title":"Summary","text":"<ul> <li>In Python, imgdd consistently outperforms imagehash by ~60%\u201395%, demonstrating a significant reduction in hashing time per image.</li> <li>imgddcore rust benchmarks achieve sub-1 ms performance for dHash and aHash, while maintaining excellent speeds across all algorithms.</li> </ul>"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#building","title":"Building","text":""},{"location":"dev/#python-package","title":"Python package","text":"<p>Build local python wheel file, from the project root <pre><code>maturin build --release --manifest-path crates/imgddpy/Cargo.toml\n</code></pre></p>"},{"location":"dev/#rust-crates","title":"Rust Crates","text":"<p>Build all rust crates, from the project root <pre><code>cargo build\n</code></pre></p>"},{"location":"dev/#running-tests","title":"Running Tests","text":""},{"location":"dev/#python-integration-tests","title":"Python (integration) Tests","text":"<p>Navigate to <code>imgddpy</code> directory <pre><code>cd crates/imgddpy/\n</code></pre></p> <p>Install dependencies <pre><code>pip install .[test]\n</code></pre></p> <p>Run tests <pre><code>pytest\n</code></pre></p>"},{"location":"dev/#rust-tests","title":"Rust Tests","text":"<p>Run local tests, from the project root <pre><code>cargo test --features testing\n</code></pre></p>"},{"location":"dev/#running-benchmarks","title":"Running Benchmarks","text":""},{"location":"dev/#rust-benchmarks","title":"Rust Benchmarks","text":"<p>Run rust benchmarks, from the project root <pre><code>cargo bench --features benchmark\n</code></pre></p>"},{"location":"dev/#python-benchmarks","title":"Python Benchmarks","text":"<p>Navigate to <code>imgddpy</code> directory <pre><code>cd crates/imgddpy/\n</code></pre></p> <p>Install dependencies <pre><code>pip install .[test]\n</code></pre></p> <p>Run python benchmarks, from the project root <pre><code>pytest -m benchmark --codspeed -v\n</code></pre></p>"},{"location":"dev/#imgdd-vs-imagehash-comparison","title":"Imgdd vs Imagehash Comparison","text":"<p>Navigate to <code>comparison</code> directory <pre><code>cd crates/imgddpy/comparison/\n</code></pre></p> <p>Install dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> <p>Run the compare script <pre><code>python compare.py\n</code></pre></p>"},{"location":"dev/#docs","title":"Docs","text":""},{"location":"dev/#python-docs","title":"Python Docs","text":"<p>Navigate to <code>imgddpy</code> directory <pre><code>cd crates/imgddpy/\n</code></pre></p> <p>Install dependencies <pre><code>pip install .[dev]\n</code></pre></p> <p>Build docs <pre><code>mkdocs build\n</code></pre></p> <p>Serve docs <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"dev/#rust-docs","title":"Rust Docs","text":"<p>Build docs <pre><code>cargo doc --no-deps\n</code></pre></p>"},{"location":"imgdd/","title":"imgdd: Image DeDuplication","text":""},{"location":"imgdd/#imgdd.dupes","title":"<code>dupes</code>  <code>builtin</code>","text":"<pre><code>dupes(path,\u00a0filter=\"triangle\",\u00a0algo=\"dhash\", remove=False)\n</code></pre> <p>Find duplicate images in a directory.</p>"},{"location":"imgdd/#imgdd.dupes--arguments","title":"Arguments","text":"<ul> <li><code>path (str)</code>: Path to the directory containing images.</li> <li><code>filter (str)</code>: Resize filter to use. <ul> <li>Options: [<code>Nearest</code>, <code>Triangle</code>, <code>CatmullRom</code>, <code>Gaussian</code>, <code>Lanczos3</code>]</li> <li>Default: <code>Triangle</code></li> </ul> </li> <li><code>algo (str)</code>: Hashing algorithm. <ul> <li>Options: [<code>aHash</code>, <code>mHash</code>, <code>dHash</code>, <code>pHash</code>, <code>wHash</code>]</li> <li>Default: <code>dHash</code></li> </ul> </li> <li><code>remove (bool)</code>: Whether to remove duplicate files<ul> <li>Default: <code>False</code></li> </ul> </li> </ul>"},{"location":"imgdd/#imgdd.dupes--returns","title":"Returns","text":"<p><code>Dict[str, list[str]]</code>: A dictionary mapping hashes to lists of file paths.</p>"},{"location":"imgdd/#imgdd.dupes--usage","title":"Usage","text":"<pre><code>import imgdd as dd\n\nduplicates = dd.dupes(\n    path=\"path/to/images\",\n    algo=\"dhash\",\n    filter=\"triangle\",\n    remove=False\n)\nprint(duplicates)\n</code></pre>"},{"location":"imgdd/#imgdd.hash","title":"<code>hash</code>  <code>builtin</code>","text":"<pre><code>hash(path,\u00a0filter=\"triangle\",\u00a0algo=\"dhash\",\u00a0sort=False)\n</code></pre> <p>Calculate the hash of images in a directory.</p>"},{"location":"imgdd/#imgdd.hash--arguments","title":"Arguments","text":"<ul> <li><code>path (str)</code>: Path to the directory containing images.</li> <li><code>filter (str)</code>: Resize filter to use. <ul> <li>Options: [<code>Nearest</code>, <code>Triangle</code>, <code>CatmullRom</code>, <code>Gaussian</code>, <code>Lanczos3</code>]</li> <li>Default: <code>Triangle</code></li> </ul> </li> <li><code>algo (str)</code>: Hashing algorithm. <ul> <li>Options: [<code>aHash</code>, <code>mHash</code>, <code>dHash</code>, <code>pHash</code>, <code>wHash</code>]</li> <li>Default: <code>dHash</code></li> </ul> </li> <li><code>sort (bool)</code>: Whether to sort the results by hash values.<ul> <li>Default: <code>False</code></li> </ul> </li> </ul>"},{"location":"imgdd/#imgdd.hash--returns","title":"Returns","text":"<p><code>Dict[str, str]</code>: A dictionary mapping file paths to their hashes.</p>"},{"location":"imgdd/#imgdd.hash--usage","title":"Usage","text":"<pre><code>import imgdd as dd\n\nresults = dd.hash(\n    path=\"path/to/images\",\n    algo=\"dhash\",\n    filter=\"triangle\",\n    sort=False\n)\nprint(results)\n</code></pre>"},{"location":"imgdd/#supported-hashing-algorithms","title":"Supported Hashing Algorithms","text":"<ul> <li> <p>aHash (Average Hash):</p> <ul> <li>Calculates average pixel value and compares each pixel to the average.</li> <li>Simple and fast to compute.</li> <li>Suitable for detecting overall image similarity.</li> </ul> </li> <li> <p>mHash (Median Hash):</p> <ul> <li>Uses median brightness for more robustness to lighting changes.</li> <li>Suitable for images with varying brightness or exposure levels.</li> </ul> </li> <li> <p>dHash (Difference Hash):</p> <ul> <li>Encodes relative changes between adjacent pixels.</li> <li>Resistant to small transformations like cropping and rotation.</li> </ul> </li> <li> <p>pHash (Perceptual Hash):</p> <ul> <li>Analyzes frequency domain using Discrete Cosine Transform (DCT).</li> <li>Focuses on low-frequency components, which are less affected by resizing and compression.</li> </ul> </li> <li> <p>wHash (Wavelet Hash):</p> <ul> <li>Uses Haar wavelet transformations to capture image features.</li> <li>Robust against scaling, rotation, and noise.</li> </ul> </li> </ul>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<pre><code>pip install imgdd\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":""},{"location":"quickstart/#hash","title":"Hash","text":"<pre><code>import imgdd as dd\n\nresults = dd.hash(\n    path=\"path/to/images\",\n    algo=\"dhash\",  # Optional: default = dhash\n    filter=\"triangle\",  # Optional: default = triangle\n    sort=False # Optional: default = False\n)\nprint(results)\n</code></pre>"},{"location":"quickstart/#dupes","title":"Dupes","text":"<pre><code>import imgdd as dd\n\nduplicates = dd.dupes(\n    path=\"path/to/images\",\n    algo=\"dhash\", # Optional: default = dhash\n    filter=\"triangle\", # Optional: default = triangle\n    remove=False # Optional: default = False\n)\nprint(duplicates)\n</code></pre>"}]}